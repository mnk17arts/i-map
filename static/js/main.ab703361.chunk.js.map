{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","_useState","useState","latitude","longitude","width","height","zoom","_useState2","Object","slicedToArray","viewport","setViewport","_useState3","_useState4","selectedRegion","setselectedRegion","useEffect","listener","e","key","window","addEventListener","removeEventListener","react_default","a","createElement","esm","assign","mapboxApiAccessToken","process","mapStyle","onViewportChange","dataUsage","map","park","id","geometry","coordinates","className","onClick","preventDefault","style","backgroundColor","f","Data","onClose","Country","color","text","percent","item","cn","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab703361.chunk.js","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport ReactMapGL, { Marker, Popup } from \"react-map-gl\";\nimport * as dataUsage from \"./data/dataUsage.json\";\n\nexport default function App() {\n  const [viewport, setViewport] = useState({\n    latitude: 20.593684,\n    longitude: 78.96288, \n    width: \"100vw\",\n    height: \"90vh\",\n    zoom: 2\n  });\n  const [selectedRegion, setselectedRegion] = useState(null);\n\n  const bgColor = (f) => {\n    let clr;\n    if (f < 1) {\n      clr = \"yellow\";\n    } else if (f < 5) {\n      clr = \"salmon\";\n    }\n    else if (f < 20) {\n      clr = \"orangered\";\n    }\n    else if (f < 50) {\n      clr = \"purple\";\n    }\n    else {\n      clr = \"red\";\n    }\n    return clr;\n  };\n  \n  const legendData = [\n    {color: \"yellow\", text: \"0 - 1\", percent: \"22 %\"},\n    {color: \"salmon\", text: \"1 - 5\", percent: \"13 %\"},\n    {color: \"orangered\", text: \"5 - 20\", percent: \"27 %\"},\n    {color: \"purple\", text: \"20 - 50\", percent: \"37 %\"},\n    {color: \"red\", text: \"50+\", percent: \"1 %\"}\n  ];\n\n  useEffect(() => {\n    const listener = e => {\n      if (e.key === \"Escape\") {\n        setselectedRegion(null);\n      }\n    };\n    window.addEventListener(\"keydown\", listener);\n\n    return () => {\n      window.removeEventListener(\"keydown\", listener);\n    };\n  }, []);\n\n  return (\n    <div>\n      <ReactMapGL\n        {...viewport}\n        mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_TOKEN}\n        mapStyle=\"mapbox://styles/mapbox/outdoors-v11\"\n        onViewportChange={viewport => {\n          setViewport(viewport);\n        }}\n      >\n        {dataUsage.features.map((park,id) => (\n          <Marker\n            key={id}\n            latitude={park.geometry.coordinates[1]}\n            longitude={park.geometry.coordinates[0]}\n          >\n            <button\n              className=\"marker-btn\"\n              onClick={e => {\n                e.preventDefault();\n                setselectedRegion(park);\n              }}\n            >\n              {/* <img src=\"/skateboarding.svg\" alt=\"Skate Park Icon\" /> */}\n              <div className=\"marker-div\" style={{backgroundColor: bgColor(park.Data)}}></div>\n\n            </button>\n          </Marker>\n        ))}\n\n        {selectedRegion ? (\n          <Popup\n            latitude={selectedRegion.geometry.coordinates[1]}\n            longitude={selectedRegion.geometry.coordinates[0]}\n            onClose={() => {\n              setselectedRegion(null);\n            }}\n          >\n            <div className=\"popup-div\">\n              <h2>{selectedRegion.Country}</h2>\n              <p><span>Data Usage : </span><br/>{selectedRegion.Data}</p>\n            </div>\n          </Popup>\n        ) : null}\n      </ReactMapGL>\n    \n      <div className=\"legend-div\">\n        <div className=\"legend-top\">\n          <div className=\"legend-detail\"> Data Usage </div>\n          <div className=\"legend-gradient\"> </div>\n        </div>\n        <div className=\"legend-bottom\">\n          <div className=\"legend\">\n              {legendData.map((item, id) => { \n                let cn = \"legend-item li\"+ id; \n                return (                  \n                  <div className={cn} key={id}>\n                    <div className=\"legend-color\" style={{backgroundColor: item.color}}></div>\n                    <div className=\"legend-text\">{item.text}</div>\n                    <div className=\"legend-percent\">{item.percent}</div>\n                  </div>\n                )})}\n\n          </div>\n        </div>\n      </div>  \n\n    </div>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}